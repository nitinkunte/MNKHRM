@page "/authentication/{action}"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider

<RemoteAuthenticatorView Action="@Action" OnLogInSucceeded=@this.OnLogInSucceeded />

@code{ [Parameter] public string Action { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }

    public async Task OnLogInSucceeded()
    {
#if DEBUG
        await Task.Delay(10000);
#endif
        var user = (await authenticationState).User;

        if (user.Identity.IsAuthenticated)
        {

            try
            {

                var tokenResult = await TokenProvider.RequestAccessToken();
                if (tokenResult.TryGetToken(out var token))
                {
                    Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.Value);
                    var role = await Http.GetFromJsonAsync<Web.DTO.NetStd.Data.UR>("https://localhost:34280/api/Employees/GetRole");
                    System.Security.Claims.ClaimsIdentity claimsIdentity = new System.Security.Claims.ClaimsIdentity();
                    claimsIdentity.AddClaim(new System.Security.Claims.Claim(System.Security.Claims.ClaimTypes.Role, role.RoleName));
                    user.AddIdentity(claimsIdentity);
                }

            }
            catch (Exception ex)
            {
                var errorMsg = ex.ToString();
            }
        }
    } }


