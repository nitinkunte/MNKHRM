@page "/afterlogin"
@attribute [Authorize]

@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider
@inject NavigationManager NavManager

<h3>After Login Stuff</h3>

<hr />
@if (!string.IsNullOrWhiteSpace(GoToPage))
{
    <h4>Go To Page:</h4>
    <p> @GoToPage</p>
}
else
{
    <p>Loading...</p>
}
<hr />


@if (!string.IsNullOrWhiteSpace(Msg))
{
    <hr />
    <h4>Message:</h4>
    <p> @Msg</p>
}



@code {

    private string Msg { get; set; }
    private string Role { get; set; }
    private string GoToPage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {

            string gotoPage = "/";
            NavManager.TryGetQueryString<string>("gtp", out gotoPage);
            GoToPage = gotoPage;

            Msg = string.Empty;
            var tokenResult = await TokenProvider.RequestAccessToken();
            if (tokenResult.TryGetToken(out var token))
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.Value);

                //Role = await Http.GetFromJsonAsync<string>("https://localhost:34280/api/Employees/GetRole");
            }
            else
            {
                Msg = "Invalid Token";
            }
        }
        catch (Exception ex)
        {
            Msg = ex.ToString();
        }

    }
}
