@page "/EmployeeList"
@inject APIService api
@inject IJSRuntime JSRuntime 
@inject NavigationManager NavigationManager

<h2>Employee List</h2>
    @if (Employees == null)
    {
        <div class="spinner"></div>
    }
    else if (Employees.Any() == false)
    {
        <p><em>No employees exist in the system! Click button below to add new.</em></p>
        <a href="@($"employee")" class="btn btn-primary">Add New</a>
    }
    else
    {
        <a href="@($"employee")" class="btn btn-primary">Add New</a>
        <hr/>

        <table class="table table-striped table-bordered table-sm">
            <thead class="table-active">
                <tr>
                    <th scope="col">
                        First Name
                        <button @onclick="@(() => SortTable("NameFirst"))" class="float-right" style="border: none;">
                            <span class="oi @(GetSortStyle("NameFirst"))"></span>
                        </button>
                    </th>
                    <th scope="col">Last Name</th>
                    <th scope="col">Rate</th>
                    <th scope="col">USCIS Expiry</th>
                    <th scope="col">Is Active</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            @foreach (var Emp in Employees)
            {
                <tr>
                    <td>@Emp.NameFirst</td>
                    <td>@Emp.NameLast</td>
                    <td>@Emp.Gender</td>
                    <td>expirty</td>
                    <td>@Emp.IsActive</td>
                    <td>
                        @* <button @onclick="@( async () => await  HandleSubmitAsync(Emp.Id))">Edit</button> *@
                        <a href="@($"employee/{Emp.Id}")" class="btn btn-primary m-1">Edit</a>
                    </td>
                </tr>
            }
            
            <tfoot class="table-active">
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Rate</th>
                    <th>USCIS Expiry</th>
                    <th>Is Active</th>
                    <th></th>
                </tr>
            </tfoot>
        </table>
    }



@code {
    
    private List<EmployeeModel> Employees;
    private bool IsSortedAscending;
    private string CurrentSortColumn;
    protected override async Task OnInitializedAsync()
    {
        try 
        { 
            Employees = await api.GetAllEmployeesAsync();
        }
        catch(Exception ex)
        {
            Employees = new List<EmployeeModel>();
        }
    }
    
    private void SortTable (string col)
    {
        if (col != CurrentSortColumn)
        {
            //We need to force order by descending on the new column
            Employees = Employees.OrderBy(x => x.GetType().GetProperty(col).GetValue(x, null)).ToList();
            CurrentSortColumn = col;
            IsSortedAscending = true;
        }
        else //Sorting against same column but in different direction
        {
            if (IsSortedAscending)
            {
                Employees = Employees.OrderByDescending(x => x.GetType().GetProperty(col).GetValue(x, null)).ToList();
            }
            else
            {
                Employees = Employees.OrderBy(x => x.GetType().GetProperty(col).GetValue(x, null)).ToList();
            }

            IsSortedAscending = !IsSortedAscending;
        }
    }
      
    
    private string GetSortStyle(string col)
    {
        string ret = string.Empty;
        if (CurrentSortColumn != col)
        {
            ret = string.Empty;
        }
        if (IsSortedAscending)
        {
            ret = "oi-sort-ascending";
        }
        else
        {
            ret = "oi-sort-descending";
        }
        return ret;
    }

}